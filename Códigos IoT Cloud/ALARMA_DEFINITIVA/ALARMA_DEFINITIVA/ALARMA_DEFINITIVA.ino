/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/73c5d125-7b85-4d3d-a437-e18a91a06d07 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  bool alarm;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>
MKRIoTCarrier carrier;
 
int pir = A5;
bool pirState = LOW;
 
//Colors
uint32_t colorRed = carrier.leds.Color(0, 255, 0);   //RED
uint32_t colorGreen = carrier.leds.Color(255, 0, 0);  //GREEN



void setup() {
  
  
// Initialize serial and wait for port to open:
  Serial.begin(9600);
  pinMode(pir, INPUT);
 
  initProperties(); // defined in thingProperties.h
  
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  while(ArduinoCloud.connected() != 1){
    ArduinoCloud.update();
    delay(500);
  }
  CARRIER_CASE = false;
  carrier.begin();
  
  setDebugMessageLevel(4);   //Get Cloud Info/errors , 0 (only errors) up to 4
  ArduinoCloud.printDebugInfo();
  
  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update();
    carrier.display.setTextSize(3);
    carrier.display.setCursor(20, 70);
    carrier.display.println("Estableciendo");
    carrier.display.setCursor(5, 110);
    carrier.display.println("Conexion...");
    delay(500);
  }
}

void loop() {
  ArduinoCloud.update();
  // Your code here
 
  //reading the status of the PIR sensor
  pirState = digitalRead(pir);
 
  //checking if the PIR sensor has detected movement
  if (pirState == HIGH) {
    alarm = true;
}

if (alarm == false) {
    carrier.display.fillScreen(ST77XX_BLACK);
    carrier.display.setCursor(30, 100);
    carrier.display.setTextSize(3);
    message = "No hay moros en la costa";
    carrier.leds.fill((colorGreen), 0, 5);
    carrier.display.println(message);
    carrier.leds.show();
  }
 
  //When the alarm has been triggered and it is on
  //The alarm will be on until the user goes to cloud's dashboard to turn it off
  else {
    carrier.display.fillScreen(ST77XX_BLACK);
    carrier.display.setCursor(30, 100);
    carrier.display.setTextSize(2);
    message = "Cuidado! Hay gente por ahi";
    carrier.leds.fill((colorRed), 0, 5);
    carrier.display.println(message);
    carrier.leds.show();
    //When motion is detected
    Serial.println(pirState);
    delay(1000);
  }

}

/*
  Since Alarm is READ_WRITE variable, onAlarmChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAlarmChange()  {
  //Add your code here to act upon Alarm change
}
